Learning Todo
	- Learn how to copy files to an existing docker image
	- Create a Dockerfile that creates an image which
		DONE - Based on Alpine linux
		DONE - Has VIM installed
		DONE - Has .vimrc and .bashrc added
		DONE - Pushed to asszem
		- Has a volume mounted (?)
		- Has a bind point
	- Understand when files are lost from a container
	- Learn Compose
	- Try to stuff webservice to a docker container
		- With a simple server
		- With a WebSphere server

First Steps
	Install Docker
	Run command: docker run -d -p 80:80 docker/getting-started

Concepts
	Dockerfile - A text-based script of instructions that is used to create a container image. 
	Image - like a class, it will be produced as an output 
	Container - like an object of a class. It is a running image. 
		- Each container should do one thing and do it well. 
		- If two containers are on the same network, they can talk to each other. If they aren't, they can't.  Each container has its own IP address
		- CTRL-P then CTRL-Q to exit a running container without stopping it
	Host - the machine on which Docker is running
	Ports 
		- The application inside the container is listening on a specified port, but it needs to be bind to the host's port
	Bind Mount vs Volume
		- Bind Mount:  
			- mounts a folder from the Host machine to the container.  The Host machine other processes can write to that folder
			- Example:
		- Volume: 
			- mounts a folder handled by Docker, so other processes can not use it. It is preferred to store persistent data (if data is not needed to be added from outside the container)
			- Docker maintains the physical location on the disk and you only need to remember the name of the volume.
			- Files will be available for any other attached
			  containers
			- Example:
				docker run -it -v {volume-name}:{host-location}
		- Sources
			- General descriptions
				https://4sysops.com/archives/introduction-to-docker-bind-mounts-and-volumes/
			- Why can't add mount to a Dockerfile
				https://stackoverflow.com/questions/47942016/add-bind-mount-to-dockerfile-just-like-volume


Docker Commands
	docker run 
		- The docker run command first creates a writeable container layer over the specified image, and then starts it using the specified command.
		- Documentation: https://docs.docker.com/engine/reference/commandline/run/
		- Start an image and execute a command inside it
			docker run -it -d --rm --name ubuntuContainer1 ubuntu bash
				docker 	[CLI] - it tells that the following will be a docker CLI command. It will communicate with the Docker application running on the host machine
				
				run		[COMMAND] - it will execute a command, in this example 'run'
				-it		[OPTION] - it will have an interactive shell stdin
				-d		[OPTION] - run it detached mode (can be attached with docker attach)
				-p		[OPTION] - short for --publish, port binding  [host port]:[container port]
				-v 		[OPTION] - bind mound a VOLUME
				-w 		[OPTION] - lets the command being executed inside directory given, here /path/to/dir/. If the path does not exist it is created inside the container.
				--rm 	[OPTION] - it will be removed after exiting
				--name  [OPTION] - name of the container
				ubuntu	[ARGUMENTS] it is the name of the image to run
				bash 	[ARGUMENTS] it is the command to execute inside the container, it must be an executable, for example /bin/bash
	docker ps
		- display running containers
		- options
			-a - displays all contaniers (even stopped ones)
	docker image 
		- ls - lists all available images
	docker start/stop/restart {container id, name, etc}
		- start/stop a container
	docker attach {container id} 
		- attach to a started container
	docker rm {container id}
		- remove the container
		-f [OPTION] - force. It can be used to force remove a still running container, without the need of stopping it first
	docker inspect {container id}
		- displays information about the container
	docker tag {image-name} {username/tagname}
	docker system df -v
		- display images space usage
	docker build {image name} /path/to/dockerfile
		- builds an image
		- flags
			-t - tag the image
	docker exec {container-id} {command}
		- Execute a command inside the container: docker exec 885 cat data.txt
	docker volume 
		- create {volume-name}
		- ls 
	docker network 
		- creates a network in witch containers can communicate with each other
	docker cp
		- Copies to or from host to or from a running container
		- docker cp source/path/in/host container:target/path/in/cont
	docker commit {container-id} new_image_name
		- creates a new image from current container

	Examples
		docker run -it -d --rm --name ubuntu1 ubuntu bash
		docker run -it --rm --name node node:latest
		docker system df -v
		docker build -t image-name .
		docker exec 885 cat data.txt
		docker run -dp 3000:3000 -w /app -v "$(pwd):/app" node:12-alpine sh -c "yarn install && yarn run dev"
		Bind Mount example:
			 docker run -it --name ubuntuBindMount -v //$(pwd)/test:/bindMountTest ubuntu bash
		Volume Mount example

Tag a new build
	

Troubleshooting
	- Git Bash / ConEmu
		- Starting a simple ubuntu image don't work because of a known issue of Git-Bash
			- command: 
				docker run -it --rm ubuntu /bin/bash
			- error: 
				docker: Error response from daemon: OCI runtime create failed: container_linux.go:370: starting container process caused: exec: "C:/Program Files/Git/usr/bin/bash": stat C:/Program Files/Git/usr/bin/bash: no such file or directory: unknown.
			- solution: 
				A) run the command without path
					docker run -it --rm ubuntu bash
				B) escape the first slash with another slash
					docker run -it --rm ubuntu //bin/bash
		- https://github.com/git-for-windows/build-extra/blob/main/ReleaseNotes.md
			If you specify command-line options starting with a slash, POSIX-to-Windows path conversion will kick in converting e.g. "/usr/bin/bash.exe" to "C:\Program Files\Git\usr\bin\bash.exe". 
			Alternatively, you can double the first slash to avoid POSIX-to-Windows path conversion, e.g. "//usr/bin/bash.exe".
	- Install VIM inside a container
		- Build an Image From a Dockerfile
			FROM ubuntu
			RUN ["apt-get", "update"]
			RUN ["apt-get", "install", "-y", "vim"]
	- Set WSL (Windows Subsystem Linux) to version 2 in shell (Git Bash, PowerShell, etc)
		wsl --set-default-version 2
				

Sources
	- Docker from SCRATCH - good demonstration video of core concepts
		https://www.youtube.com/watch?v=i7yoXqlg48M
	- Containers from SCRATCH - deep drive into an example of containerazation using GO language 
		https://www.youtube.com/watch?v=8fi7uSYlOdc
	- Where is local image data located?  Good resource in verious environments (in Windows environment: C:\Users\AndrasAntalOlah\AppData\Local\Docker\wsl)
		https://stackoverflow.com/questions/42250222/where-is-docker-image-location-in-windows-10
	- How to create an Alpine linux based Dockerfile with vim, curl, bash and wget installed?
		https://platformengineer.com/install-vi-bash-curl-on-alpine-linux/
