==============================================================================================================
Recently learned commands to Memorize
	zj zk - jump rom fold to fold
	Ctrl-b - open CtrlP in Buffers mode
	vim filename + - open the file at the end
	* - search for the word under cursor
	Search under cursor [i [I ]i ]I
		from the beginning [
		from the current position ]
		I all occurence
		:help include-search
	:il {pattern> - just like [I but for the pattern
	:vim pattern % - adds the pattern to the quickfix list
	q? - opens Command-Line window for previous search
	q/ - opens Command-Line window for next search
	q: - opens Command-Line window to execute command
	gf - opens the file under the cursor
===============================================================================================================

MOVEMENT
	j / k soron belül mozog
	gj /gk sorok között mozog
	^ - az adott sor első nem üres karakterére ugrik (ALTgr-3, utána sajnos még egy extra gombot nyomni kell különben nem érzi) - remap: H
	$ - az adott sor végére ugrik - remap L
	g_ - az adott sor végére ugrik.
	:changes - mutatja a változtatásokat CHANGELIST
		g, - ELŐRE(changelisten lefelé, a legutolsó változtatás felé) lép a changelisten. Ha nem ugráltam kézzel a changelisten, akkor ez a legutolsó változtatással lesz megegyező (Az automatikus '. marks a legutolsó változás sorának elejére viszi a kurzort) 
			{szám}g, - a changelisten az adott sorszámú KÉSŐBBI(lentebbi) változtatáshoz viszi a kurzort
		g; - HÁTRA(changelisten felfelé, a legkorábbi változtatás felé) lép a changelisten
			{szám}g; - a changelisten az adott sorszámú KORÁBBI(felfelé) változtatáshoz viszi a kurzort
		gi - a legutolsó szerkesztés helyéhez viszi a kurzort és belép inzert módba. 
	:jumps - megmutatja a jumplistet JUMPLIST
		ctrl-o - a jumplist előző (listán fentebbi) eleme (Ez fontos, mert ha elveszítem a fonalat, ezzel tudok visszamenni)
		{szám}CTRL-o - a jumplisten megfelelő számú elemhez ugrik vissza - Jump Older - talán így lehet megjegyezni
		ctrl-i - a jumblist következő (listán lentebbi) eleme
		{szám}CTRL-i - a jumplisten megfelelő számú elemhez ugrik előre
		Ugrabugrálás oda-vissza:
			ctrl-o: előző pozi, majd ctrl-i vissza oda, ahonnan ugrottunk
			ctrl-i sokat nyomogatva: a jumplist végére ér (legutolsó pozi)
	Soron belül ugrás megfelelő karakterre
		{szám}f/F{karakter} - a {számnyi} előfordulására a beírt karakternek a sorban jobbra(f)/balra(F) - mnemo: "find"
		{szám}t/T{karakter} - a beírt karakternek a {számnyi} előfordulása elé(t)/mögé(T) - mnemo: "to"
			; - megismétli az f/f vagy t/T keresést JOBBRA (ALTgr-?)
			, - megismétli az f/f vagy t/t keresést BALRA (simán ,)
	EasyMotion plugin
		Installation:
			git clone https://github.com/easymotion/vim-easymotion
		Help documentation:
			https://github.com/easymotion/vim-easymotion/blob/master/doc/easymotion.txt#L86
		Leader key mapped to <space>
		Enter key opens a multi-word search (only in current window)
		s - bidirectional, multi-window one character search
WINDOWS :help window
	CTRL-W - ablakkezelő parnacsok
		hjkl - Megfelelő irányban lévő ablakba mozdítja a kurzort
		w - a nyitott ablakok között váltogat
		x - felcseréli egy másik ablakkal az éppen nézet ablakot (azaz a fókusz ugyanott marad, csak más ablak kerül ugyanarra a helyre)
		c - close
		q - quit
		T - új tabon nyitja meg az aktuális ablakokt
		r - eggyel lejebb mozgatja az aktuális ablakot
		o - becsukja az összes többi ablakot :on parancs is
	CTRL-j/k windowsok között vált (saját VIMRC remap)
	CTRL-h/l tabok között vált (saját VIMRC remap)
	ALT -j/k/h/l - tabok között vált
	:sp(lit) {filenév} - az aktuális ablakból még egyet csinál, vízszíntesen (ha megadok filenevet, akkor azt nyitja oda meg)
	:vp {filenév} - vertikális split, azaz függőlegesen csinál két új anzert mód kilépés alternatívablakot.   (ha megadok filenevet, akkor azt nyitja oda meg)
	:new, :vnew - opens a new empty buffer (vertical)
	:tabnew - megnyit egy új, üres tabot egy üres ablakkal
	:tabnew % - opens the current buffer in a new tab
	:tabe {filenév} - új tabban nyitja meg a megadott file-t.
	ABLAK ÁTMÉRETEZéSE
		:res - paraméter nélkül: maxra állítja az aktuális ablakot (ez jó, ha a CTRL-W o parancs nem menne)
		:res {szám} - az aktuális ablakot a számban megadott sor magasságúra állítja
		:res + {szám} - az aktuális ablakot megnöveli ennyivel (mínusz jelre meg csökkenti)
		z {szám} - az aktuális ablak magasságát a z után megadott számmá alakítja
		z {szám} - zoom, az ablakot a megadott szám magasságára állítja
		{szám> CTRL-W | - a megadott szám szélességűre állítja az ablakot
		CTRL-W_ - Aktuális ablak maximum vízszintes méret
		CTRL-W1_ - Aktuális ablak minimum vízszintes méret
	z. - a kurzor alatti sort az ablak közepére állítja
	zt - a kurzor alatti sort az ablak tetejére állítja
	zb - a kurzor alatti sort az ablak aljára állítja
	:set wrapmargin:={szám} - beállítja, hogy jobb oldalt hány karakter legyen a margó a szélétől :set wm is jó.
	:set textwidth={szám} - beálítja, hogy hány karakter után törjön a sor, default=0, ekkor az 
BUFFERS  :help ls
	:ls - kilistázza az adott buffereket (ha nem ENTER-t nyomok utána, hanem b, akkor lehet továbbiakat írni
	:ls! - az unlisted buffferekt is kimutatja
		u	an unlisted buffer (only displayed when [!] is used)
		%	the buffer in the current window
		#	the alternate buffer for ":e #" and CTRL-^
		a	an active buffer: it is loaded and visible
		h	a hidden buffer: It is loaded, but currently not
		-	a buffer with 'modifiable' off
		=	a readonly buffer
		+	a modified buffer
		x   a buffer with read errors
	:b (:bu vagy :buffer) - a megadott buferre ugrik (lehet buffer száma, egy vagy több, lehet szöveg, TAB-al kiegészít)
	:b# - az alternatív bufferek között váltogat (EZT MÉG KICSIT ÁTNÉZNI)
	:bd - törli a megadott buffereket
		3,7 - range megadása, a 3-6 közötti buffereket törli
		%bd - törli az összes buffert, a % itt a teljes range-t jelöli
		:bd! - törli az olyan buffert is, amit amúgy nem engedne
		:ball! - szépen letöröl mindent.
	:hide -elrejti az adott buffert
SEARCH
	:g/reagular-expressiong/p - GREP :-)
	:g/searchterm
	:g/searchterm/-1,+1 | echo "=============" - search with -1 +1 context and separate with ===
	:g/searchterm/y A - copies the search result to register A
	Search under cursor [i [I ]i ]I
		from the beginning [
		from the current position ]
		i first occuerrence
		I all occurence 
		:help include-search
	[I - search for every occurence under cursor, from the beginning
	]I - search for every occurence under cursor, from the current position
	:il {pattern> - just like [I but for the pattern
	/\V%pattern - search in the visual selected area only
	:lvmigrep /searchterm/% - adds search term to the location list
	:vmigrep /searchterm/% - adds search term to the quickfix list
		:noh - no highlight, a legutóbbi keresés highlightolását kapcsolja ki.
		q/ - legutóbbi keresési lista
		// legutóbbi keresést megismétli
TEXT EDIT
	CTRL-> és CTRL-< - behúzza vagy visszaviszi az aktuális szöveget a TAB-ban beállított értéknyit.
	daw - a kurzortól balra lévő szót törli
	caw - a kurzortól balra lévő szót törli és inzert módba lép
	x és X - a kurzor alatti vagy a kurzor ELŐTTI karaktert törli
	D - a kurzor alattól jobbra mindent töröl 
	CTRL-Q (Block módban Visual mód) I - a kijelölt terület elé minden sorba beszúrja a beírt szöveget (CTRL-Q A pedig append a végére)
	gqip / gwip - adott paragrafust átalakítja sorokká a sortöréseknél (hard wrap), gwip a kurzort eredeti helyén tartja, gqip pedig a legutolsó sor alá viszi
	COPY-PASTE
		:reg - a register tartalmát mutatja, innen lehet pastelni. 
		"{regiszterazonosító}p - a regiszterszámba írt értéknek megfelelő sort bepásztézza
		"{regiszterazonosító}y - berakja a megnevezett regiszterbe a kijelölt tartalmat (Visual módban)
		"+c - a Windows vágólapra másolja
		"+p - a Windows vágólapról pasztézza
		:put - copies Windows clipboard
		:113put + - copies windows clipboard to line 113
SUBSTITUTE
	substitionton character can be anything that immediately follows s
		examples
		:%s/from/to/g
		:%s-from-to-g
	range
		:{hol, range} s /mit /mire /flagek
		range minták
			:%s - a teljes dokumentumban
			:4,$ - a 4. sortól a kijelölés végéig
	flagek
		/  - nincs flag, akkor csak a következő előfordulást fogja cserélni
		/g - az adott sorban végig
		/c - rákérdez minden cserénél
	Kifejezésre vonatkozó dolgok
		\<teljes szó\> - csak a teljes szót helyettesíti
			példa: \<alma\> az "almafa" szóban nem helyettesíti az alma kifejezést
		\(vagyez\|vagyemez\) - a két szó bármelyik előfordulása
	Select and Substitute Unicode characters
		:%s/\%u200b//g	- replaces <u200b> unicode character (linebreak) in the entire document
	Minták
		:%s/mit/mire/g - a teljes dokumentumban (%) kicseréli a mit, mire, minden sorban /g flag
		:%s/mit/mire/gc - ugyanez, csak minden egyes csere előtt rákérdez /c flag
		hasznos példák helyettesítésre:
			http://www.thegeekstuff.com/2009/04/vi-vim-editor-search-and-replace-examples/
INSERT MODE
	- CTRL-W - balra lévő szót törli
	- CTRL-T/D - tabokat állítja
	- CTRL-N/P - korábbi mintázatok alapján megpróbálja autocompletelni a kurzor alatti szót (a listában a ctrl-n/p nyomogatásával lehet haladni, nem kell entert nyomni, automatikusan beírja, amit akarunk, lehet tovább gépelni. Ha mégsem szeretnénk semmit, akkor CTRL-P-t válasszunk legfelül).
	- CTRL-xl - a teljes sort beilleszti 
	- CTRL-xf - a mappában lévő fájlokra egészíti ki a beírt szöveget, alul látszik, mikkel lehet le-föl haladni
VISUAL MODE
	gv - az előző visual módba kijelölt sorokat újra kijelöli
	o - Visual módban az aktuális kijelölés másik végére viszi a kurzort. Baromi hasznos!!!
	viW - visual inside Words (space közötti terület kijelölése)
FOLD
	,fi - set foldmethod=indent - automatikusan behúzza a foldokat
	,fm - set foldmethod=manual - kézi foldolás
	zf - set new fold (only works in manual)
	za - toggle current fold (open/close)
	zo - open fold
	zR - open ALL folds
	zc - close fold
	zM - close all folds
	zC, zO, ZA - on all fold levels under cursor
	zj zk - jump rom fold to fold
	[z - move to the beginning of the current open fold
	]z - move to the end of the current open fold
DIFF :h :diff
	:vert diffsplit {file} - az aktuális ablakot összehasonlítja a beírt fájllal.
	:diffoff! - az összes diff módban lévő ablakot bezárja
	:diffput - az aktuális ablak változásait átmásolja a másik diff ablakba
	:diffget - a másik ablak változásait visszamásolja az aktuális ablakba
QUICFIX and LOCATIONLIST
	Quickfix List
		:vim pattern % - adds pattern to quickfix list
		:vmigrep /searchterm/% - adds search term to the quickfix list
		:copen - open Quickfix list
		:ccl (:cclose) - close Quickfix list
		:cl - list the quickfix items
		:.cc - jump to the error under cursor
	Location List
		:lvmigrep /searchterm/% - adds search term to the location list
		:lli - list the locationlist elements
		:lopen - opens the location list
		:lclose - closes the location list
NETRW
	Shortcuts
		i 			- Cycle between thin, long, wide, and tree listings
		{cbt}mb		- make bookmark
		{cnt}gb 	- open the {cbt} numbered bookmark
		qb 			- list the bookmarks and history
		u			- goes back in history
		{cnt}u 		- goes back {cnt} in history
		a			- changes hiding mode (none, show, hide)
		Backspace 	- edits the hiding list, comma separated values
		Ctrl-l		- refresh view
	Commands
		:Vex - open Vertical Explorer
		:E ~ - opens netrw at ~
	Setup
		let g:netrw_banner = 0 "remove banner
		let g:netrw_liststyle = 3 "set directory style to tree like
		let g:netrw_browse_split = 4 "open file in previous window
			1 - open files in a new horizontal split
			2 - open files in a new vertical split
			3 - open files in a new tab
			4 - open in previous window
		let g:netrw_altv = 1 "
		let g:netrw_winsize = 25 "set size of split
	Sources
		Setup Nerdtree-like vertical netrw
			- https://shapeshed.com/vim-netrw/
		List of all commands
			- https://gist.github.com/danidiaz/37a69305e2ed3319bfff9631175c5d0f	
MACRO HASZNáLAT :helpgrep macro
		q{regiszternév} - elindítja a makró rögzítést
		q - leállítja a makró rögzítést
		@{regiszternév} - elindítja a megadott makrót
SESSION MANAGEMENT
		:mksession {sessionnév} - elmenti a session-t (nyitott fájlokat)
		:so {sessionnév} - session open, megnyitja az elmentett sessiont.
		:mkview {viewnév} - elmenti a foldokat meg a nézetet (ha nem adok meg file-t, akkor bajt jelez)
		:so {viewvév} - betölti a viewet.
FILE MANAGEMENT
		Reloads the file with different encoding
			:e ++enc=UTF-8
			" Press F12 to switch to UTF-8 encoding: nnoremap <F12> :e ++enc=utf-8<CR>
		:browse e - megnyitja a fájl böngészőt
		gf - goto file - megnyitja a kurzor alatt lévő szót, mint file, ha van. Visuallal lehet többet kijelölni 
		:w {filenév} - új fájlt nyit a megadott névvel. Ha volt vizuális kijelölés, akkor annak tartalmát beleírja az új fájlba.
		:e *filenév <TAB> - bárhol szerepel a fájlnévben keres
		:e. - az aktuális mappát nyitja meg a VIM belső nézőkéjével
		:E - ez is megnyitja a böngit.
		:Vex - Vertical Explorer
		:Sex - Split Explorer
		Megnyitáskor wildcard minták:
			:tabe green* meet*
			:tabe greencloud meeting*
			:tabe *meeting*
			:tabe *meeting*EN
			:tabe greencloud meeting**
	VIM Settings
		:set valami? - a kérdőjel után kiírja az aktuális setting értékét.
GENERAL STUFF
	q? - opens Command-Line window for previous search
	q/ - opens Command-Line window for next search
	q: - opens Command-Line window to execute command
	A sortörés helyének vizuális jelzése
		:set colorcolumn=80 
	Az aktuális ablak útvonalát állítja be PWD-nek:
		:cd %:h
	Hosszú listák végének mutatása:
		:history -5, - csak az utolsó ötöt mutatja (a vessző kell a végére) - kérdés, hogy lehet ezen megnyitni adott számő parancsot.
	Remap - Noremap
		map - recursive mapping
		noreamp - non-recursive mapping
		Source: https://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping 
		Example
			nmap K H - causes K to expand to H and continue
			nnoremap H G - causes H to expand to G and stop
			nnoremap G gg - causes G to expand to gg and stop
		Explanation
			K - K to expand to H, H to expand to G, G to be executed
			H - H to expand to G, G to be executed
			G - G to expand to gg, gg to be executed
SOURCES
	https://www.fprintf.net/vimCheatSheet.html

