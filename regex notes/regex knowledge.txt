To be continued: re-structure based on category names in http://regexr.com/

Basic Commands
	\		- escape
	. 		- any character
	\d 		- any digit (numbers) [0-9]
	\D		- any NON digit
	\w		- any english characters (words)
	\W		- any NON english characters
	a{3}	- match 'a' 3 times
	a{1,3}	- match 'a' minimum 1, max 3 times: 'a', 'aa', 'aaa'
	a{1,}	- match at least 1 times: 'a', 'aaaaaaaaaaaaaaaaaaaaaaaaaa'
		[abc]{3} 	- 3 characters, any of them can be either a or b or c : aaa, abc, bbb, aab
	*		- zero or more repetition of preceding pattern
				a* 		- zero or more a. selects all a's in the string
				\d*		- zero or more digits
	+		- one or more repetition of preceding pattern
				[abc]+ 	- one or more a or b or c
				\d+		- one or more digits
	?		- zero or one - preceding pattern is optional
				ab?c	- matches abc or ac as b is optional
			
	(abc)	- capture group
	(a(bc))	- capture group and subgroup
	$1		- reference capture group 1
	$&		- reference full match
	|		- or

Character sets - A "character class" matches only one out of several characters. 
	[az]	- at ANY position, a or z (if /g global flag is included. if not, only the first occurence)
	[a-z]	- at ANY position, anything between a-z
	[^abc]  - at ANY position, NOT a or b or c
	[a-zA-Z0-9_] 	- any english characters

Shorthand Character Classes
	\s	- WHITESPACE - matches anything which is considered whitespace. This could be a space, tab, line break etc.
	\S	- matches the opposite of \s, that is anything which is not considered whitespace.
	\d	- DIGIT - matches anything which is considered a digit. ie 0 - 9 (It is effectively a shortcut for [0-9]).
	\D	- matches the opposite of \d, that is anything which is not considered a digit.
	\w	- WORD matches anything which is considered a word character. That is [A-Za-z0-9_]. Note the inclusion of the underscore character '_'. 
	\W	- matches the opposite of \w, that is anything which is not considered a word character
	\t	- TAB
	\n	- NEWLINE  (NL) or linefeed(LF), end-of-line (EOL), linebreak. The line feed function moved down a line.  https://en.wikipedia.org/wiki/Newline
	\r	- CARRIAGE RETURN  (CR) The carriage return function moved the cursor from the end of the line to the beginning of the line. 
			Windows: 	\r\n (in that order)
			Mac:		\r
			Unix:		\n
			https://en.wikipedia.org/wiki/Carriage_return

Anchors
	^pattern	-matches the following pattern only at the beginning of the line 
	pattern$	-matches the preceding pattern only at the end of the line
					Example	^abc$	- matches abc pattern only if the whole line matches the pattern, eg. the line has only abc

Word boundaries
	A word is generally considered to be a string of characters that would be matched by the \w character class (that is, A-Z, a-z, 0-9 and _)
	\< 	- beginning of a word
	\>	- ending of a word
	\b	- either beginning or end of a word
			Input: goto Totoro tomato toto to
			Regex: \bto					to\b						\bto\b		to
			Match: tomato,toto, to		goto, tomato, toto, to	    to			goto, Totoro, tomato, toto, to
	\B - NOT beginning or end of word
			Input: goto Totoro tomato
			Regex: \Bto			to\b
			Match: Totoro		Totoro

Quantifiers
	?		- Matches 0 or 1 of the preceding token.
	*		- Matches 0 or more of the preceding token. 
	+		- Matches 1 or more of the preceding token.
	{3}		- Matches exactly 3 of the preceding token.
	{3,5}	- Matches 3 or 4 or 5 of the preceding token
	{3,}	- Matches 3 or more of the preceding token
	|		- Alteration
	?		- Makes the preceding quantifier lazy, causing it to match as few characters as possible

Greedy vs. Lazy Matching - after a quantifieer
	greedy:	
			- try and find the largest string it can which matches the pattern
			- finds all possible matches, so it continues searching after founding abcd, until it founds abcdefghd, which is the last occurence that satisfies the pattern
			- by default, quantifiers are greedy, and will match as many characters as possible
	lazy:	
			- match as few characters as possible
			Example:
						Pattern		Input > Result
			Greedy		a.*d		xxabcdefghdxx > abcdefghd
			Lazy		a.*?d		xxabcdefghdxx > abcd
			
			Greedy		b\w+		b be bee beer beers > be bee beer beers 
			Lazy		b\w+?		b be bee beer beers > be be  be   be

Groups
	() 		- Capturing group. Groups multiple tokens together and creates a capture group for extracting a substring or using a backreference.
			- Example:
				Regex: (ha)+
				Input: hahaha haa hah!
				Match: hahaha ha  ha
				Group#1: ha
	(?:)	- Non-capturing groups. Groups multiple tokens together without creating a capture group.
			- Example:
				Regex: (?:ha)+
				Input: hahaha haa hah!
				Match: hahaha ha  ha

Backreference
	Matches the results of a previous capture group
	\1			- backreference the first capture group
	\n			- backreference the n-th capture group
	input:		xax xab bab bax
	pattern: 	(\w)a\1
	result:		xax bab
	explain:	(\w)='x'				(\w)='b'
				\1='x'					\1='b'
				pattern: 'x''a''x'		'b''a''b'

Lookahead and Lookbehind
	To see if something matches (or doesn't) and then to throw away what was actually matched.
	Modes
		Positive - in which we are seeking to find something which matches.
		Negative - in which we are seeking to find something which doesn't match.
	Lookahead
		With a lookahead we want to look ahead (hence the name) in our string and see if it matches the given pattern, but then disregard it and move on.
	Postive Lookahead
		(?={pattern}
		Matches a group after the main expression without including it in the result.	
			Example
			Pattern: 	\d(?=px)
			Input: 		1pt 2px 3em 4px 
			Matches: 	2 4
			Explanation: a number followed by px. Note that 'px' is NOT matched, only the numbers
	Negative Lookahead
		(?!{pattern})
		Specifies a group that can not match after the main expression (if it matches, the result is discarded).
			Example
			\b1(?!000)\d\d\d\b
				Match 1 that is NOT followed by 3 zeros, but followed by 3 digits. 
				It will match 1001, 1111, but not 1000
			\b\d(?!55)\d+
				Match any number that is not followed by 55, but followed by one or more digits
	Positive Lookbehind
		(?<={pattern})
		Matches a group before the main expression without including it in the result.
			Example
			Regex: 		(?<=http:\/\/)\w+
			Input: 		http://regexr.com/foo.html?q=bar
			Matches:	regexr
			Explanation:  search for 'http://' before one ore more word characters and matches the word characters
	Negative Lookbehind
		(?<!{pattern})
		Specifies a group that can not match before the main expression (if it matches, the result is discarded).

Metacharacters
	the backslash \
	the caret ^
	the dollar sign $
	the period or dot .
	the vertical bar or pipe symbol |
	the question mark ?
	the asterisk or star *
	the plus sign +
	the opening parenthesis (
	the closing parenthesis )
	the opening square bracket [
	and the opening curly brace {


Complex Regex Samples
	email address
		\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\

		/(\b[\w._+]*)@([\w.]*)\.([a-z]{2,})\b/g
		Email:\t$&\n Userid: $1\n Subdomain: $2\n Domain: $3\n\n


Sources
	Generators and validators
		https://regex101.com/ -This is mutch better than regexr!!!
		http://regexr.com/

	CheatSheets
		http://www.rexegg.com/regex-quickstart.html#ref

	Tutorials
		http://www.regular-expressions.info/tutorial.html	
		http://www.rexegg.com/regex-quickstart.html
		https://regexone.com/lesson/ - not really good
		http://www.vogella.com/tutorials/JavaRegularExpressions/article.html

