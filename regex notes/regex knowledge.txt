Basic Commands
	\		- escape
	. 		- any character
	\d 		- any digit (numbers) [0-9]
	\D		- any NON digit
	[az]	- at ANY position, a or z 
	[a-z]	- at ANY position, anything between a-z
	[^abc]  - at ANY position, NOT a or b or c
	[a-zA-Z0-9_] 	- any english characters
	\w		- any english characters (words)
	\W		- any NON english characters
	a{3}	- match a 3 times
	a{1,3}	- match minimum 1, max 3 times
	a{1,}	- match at least 1 times
		[abc]{3} 	- 3 chacrachters, any of them can be either a or b or c
		.{2,6}		- any characters between 2 and 6 
	*		- zero or more repetition of preceding pattern
				a* 		- zero or more a. selects all a's in the string
				\d*		- zero or more digits
	+		- one or more repetition of preceding pattern
				[abc]+ 	- one or more a or b or c
				\d+		- one or more digits
	?		- preceding pattern is optional
				ab?c	- matches abc or ac as b is optional
	\b		- matches the boundary between a word and non word character
				\bword		-matches when it is at the beginning of a word boundary
				word\b		-matches when it is at the end of a word boundary
				\bword\b	-matches when it is at teh beginning and the end of the word boundary
			
	\s		-whitespace (NOT STRING :)
	\S		-NON-Whitespace
	\t		-tab
	\n		-newline  (NL) or linefeed(LF) (in that order)
				The line feed function moved down a line.
				newline, end-of-line (EOL), linebreak
				https://en.wikipedia.org/wiki/Newline
	\r		-carriage return  (CR)
				The carriage return function moved the cursor from the end of the line to the beginning of the line. 
				Windows: 	\r\n (in that order)
				Mac:		\r
				Unix:		\n
				https://en.wikipedia.org/wiki/Carriage_return
	^		-matches the following pattern only at the beginning of the line
	$		-matches the preceding pattern only at the end of the line
				^abc$	- matches abc pattern if the whole line matches the pattern
	(abc)	- capture group
	(a(bc))	- capture group and subgroup
	$1		- reference capture group 1
	$&		- reference full match
	|		- or

Greedy vs. Lazy Matching
	greedy:	a.*d		xxabcdefghdxx > abcdefghd
		- try and find the largest string it can which matches the pattern
		- finds all possible matches, so it continues searching after founding abcd, until it founds abcdefghd
	lazy:	a.*?d		xxabcdefghdxx > abcd
		- finds only the first possible match

Backreference
	Matches the results of a previous capture group
	\1			- backreference the first capture group
	\n			- backreference the n-th capture group
	input:		xax xab bab bax
	pattern: 	(\w)a\1
	result:		xax bab
	explain:	(\w)='x'				(\w)='b'
				\1='x'					\1='b'
				pattern: 'x''a''x'		'b''a''b'


Character Class
 	A "character class" matches only one out of several characters. [abc] matchers a or b or c

Metacharacters
	the backslash \
	the caret ^
	the dollar sign $
	the period or dot .
	the vertical bar or pipe symbol |
	the question mark ?
	the asterisk or star *
	the plus sign +
	the opening parenthesis (
	the closing parenthesis )
	the opening square bracket [
	and the opening curly brace {


Samples
	email address
		\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\

		/(\b[\w._+]*)@([\w.]*)\.([a-z]{2,})\b/g
		Email:\t$&\n Userid: $1\n Subdomain: $2\n Domain: $3\n\n

(\b[\w._+]*)@([\w.]*)\.(\D{2,3})\b\s

Sources
	http://regexr.com/
CheatSheets
	http://www.rexegg.com/regex-quickstart.html#ref

Tutorials
	http://www.regular-expressions.info/tutorial.html	
	http://www.rexegg.com/regex-quickstart.html
	https://regexone.com/lesson/ - not really good
	http://www.vogella.com/tutorials/JavaRegularExpressions/article.html

