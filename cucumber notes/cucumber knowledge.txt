Books and Learning Resources:
	Good starting point:
		The Cucumber for Java - by Aslak Hellesoy; Matt Wynne; Seb Rose
	Great tutorial for Eclipse/Maven setup, covers many areas of Cucumber
		http://www.thetestroom.com/category/web-automation/cucumber/

Installing Cucumber
	Install manually 
		download jars from Maven repository https://mvnrepository.com/
		cucumber-core - the core. Always needed if not installed from Maven
		cucumber-java - The choice of Backend module specifies which language you are going to write your glue (step definitions and hooks) in. 
		gherking - Gherkin is the name of the dialect that we use to write our feature files.  It includes the keywords, and their translations into other languages.
		cucumber-jvm-deps - dependencies
	Install with Maven
		1. Install Cucumber plugin
			Eclipse -> Help -> Install New Software -> Add
				Name: cucumber
				Location:  http://cucumber.github.com/cucumber-eclipse/update-site
		2. Create new Maven project
		3. Add Dependencies from https://mvnrepository.com/artifact/info.cukes
			cucumber-core
			cucumber-jvm-deps
			cucumber-java
			cucumber-junit
			gherkin
		4. Write a .feature file
		5. Write a StepDefinition
		Source
			http://www.thetestroom.com/cucumber-maven-eclipse-setup-tutorial/
		Sampleproject
			https://github.com/asszem/CucumberLearning
	Directory Structure
		Cucumber needs you to specify where your features and step definition are kept.

General Concepts
		What makes Cucumber stand out from the crowd of other tools is that it has been designed specifically to ensure the acceptance tests can easily be read—and written—by anyone on the team. 
		This reveals the true value of acceptance tests as a communication and collaboration tool.
		Acceptance tests written in this style (Feature-Scenario-Given-When-Then-And) become more than just tests; they become executable specifications.
		Gherkin -> Step Definitions (Java) -> test specific code
	Runnin Cucumber
		When you run Cucumber
		1. it reads in your specifications from plain-language text files called features
		2. examines them for scenarios to test
		3. runs the scenarios against your system. 
		Each scenario is a list of steps for Cucumber to work through. 
		So that Cucumber can understand these feature files, they must follow some basic syntax rules. The name for this set of rules is Gherkin.
	Scenario
		Each test case in Cucumber is called a scenario, and scenarios are grouped into features. Each scenario contains several steps.
	Feature files
		The business-facing parts of a Cucumber test suite, stored in feature files, must be written according to syntax rules—known as Gherkin—so that Cucumber can read them.
		The keywords Feature, Scenario, Given, When, and Then are the structure, and everything else is documentation. This structure is called Gherkin
	Step Definitions
		Map the business-readable language of each step into code to carry out whatever action is being described by the step.
		If the code in the step definition executes without error, Cucumber proceeds to the next step in the scenario. 
		If it gets to the end of the scenario without any of the steps raising an error, it marks the scenario as having passed. 
		If any of the steps in the scenario fail, however, Cucumber marks the scenario as having failed and moves on to the next one.
		As the scenarios run, Cucumber prints out the results showing you exactly what is working and what isn’t.
		As soon as it encounters a failed or pending step, Cucumber will stop running the scenario and skip the remaining steps.
		Remember that a step isn’t a test in itself. The test is the whole scenario, and that isn’t going to pass until all of its steps do.
	File and Directory structure
		Cucumber looks for .feature files and scans all .java files that has @Given @When @Then annotations, regarding their place in the project structure	
	@Before and @After
		Cucumber runs these methods before and after each execution, regardless which step definition file they are implemented. If it finds such an annotation, it will run it. 
	Java Step definition instance lifecycle
		Before Cucumber can execute a step definition, it creates an instance of the class that defines the step definition
		Only one instance of each step definition class is created while executing a scenario.
		And once the scenario has finished, Cucumber throws away all those step definition instances to ensure that each scenario runs in isolation from all the others

Gherkin Summary
	Sample
		Feature: Name of the feature
			Description of the 
			feature
			which can be
			multiple lines
			In order to <meet some goal>
			As a <type of stakeholder>
			I want <a feature>
		Background: //Same for all scenarios
			Description of background tasks
			Given ......
			And .....
		Scenario: .......
			When .....
			And .....
			And .....
			Then .....
			And .....
	Keywords
		Feature
			The feature keyword doesnt affect the behaviour of the Cucumber tests at all. Can be as long as many and can be multiple lines
			The text immediately following on the same line as the Feature keyword is the name of the feature, and the remaining lines are its description. 
			A Feature MUST be followed either by: Scenario / Bakcground / Scenario Outline
		Scenario
			Each feature can contain several scenarios. Each scenario is a single, concrete example of how the system should behave in a particular situation
			All scenarios together should describe the expected bahavior of the feature itself. Features usually have 5-20 scenarios
			Scenarios are used to explore edge cases and different paths through a feature
			A Scenarion name and Description can be multiple lines, up until the first Given/When/Then keywords
			Scenario naming is important
				When the test breaks, failing scenario name will be displayed
				Think of it as naming methods
				If the scenario is named well, the steps inside of it doesn't need to be read to understand what the scenario does. 
				A good tip is to avoid putting anything about the outcome (the Then part) of the scenario into the name and concentrate on summarizing the context and event (Given and When) of the scenario.
		Given, When, Then
			Given - it is the context
			When  - it is the event, or action in the defined context
			Then  - it is the expected outcome
		And, But
			Each Given / When / Then can be extended with And or But steps.
			Actually, And and But can be replaced with Given
			Example
				Given I have $100 in my account
				But my card is invalid
				When I request $50
				Then my card shoudl not be returned
				And I should be told to contact the bank
			Same example:
				Given I have $100 in my account
				Given my card is invalid
				When I request $50
				Then my card shoudl not be returned
				Then I should be told to contact the bank
		* to replace Given/When/Then
			Same example
				* I have $100 in my account
				* my card is invalid
				* I request $50
				* my card shoudl not be returned
				* I should be told to contact the bank
		# for Comments
	Stateless
		Each scenario must make sense and be able to be executed independently of any other scenario!!!
		When writing a scenario, always assume that it will run against the system in a default, blank state. Tell the story from the beginning, using Given steps to set up all the state you need for that particular scenario.

Step Definitions
	General description
		Step definitions sit right on the boundary between the business’s domain and the programmer’s domain.
		Gherkin describes WHAT to do, Step Definition describes HOW to do it
		There are two sides to a step definition. On the outside, it translates from plain language into code, and on the inside it tells your system what to do using automation code. 
		Step vs. Step Definition
			Step
				A Step is just documentation in plain language. It needs a Step Definition to bring it to life. 
			Step Definition
				The code to run when Cucumber matches a Step in the Feature file
		Step Matching
			Regexp Capture Groups (capturegroup)
				When you surround part of a regular expression with PARENTHESES, it becomes a capture group.
				Capture groups are used to highlight particular parts of a pattern that you want to lift out of the matching text and use. 
				In a Cucumber step definition, the text matched within each capture group is passed to the code block as an argument:
				Example
											  (      )      (    )
					@Given("^the price of a \"([^\"]*)\" is (\\d+)c$")
					public void thePriceOfAIsC(String name, int price) throws Throwable {}
			Typical regex matches
				\\d - match any numbers
				\\w - match any word character [A-Za-z0-9_]
				\\s - match any whitespace characters [\t\r\n]. Space, Tab, LineBreak
				\\b - word boundary
			Quantifiers
				* - zero or many
				+ - on or many
				? - optional, zero or many. Useful to handle plural(s)
				| - or. Example: "When I visit|go the homepage..."
			Non-Capturing groups: (?:....)
				Regex matches it but doesn't add to the capturing group

Scenario execution
	1. Read first step
	2. Is there matching step definition?
		No: UNDEFINDED SCENARIO
	3. Execute ste definition's code
	4. Was an exception thrown?
		Yes:
			Is it a Pending Exception?
				Yes: PENDING SCENARIO
				No: FAILED SCENARIO
	5. Are there any more test steps?
		Yes: Goto Step 1.
		No: PASSED SCENARIO

Background Best Practices
	A background section in a feature file allows you to specify a set of steps that are common to every scenario in the file. 
	Backgrounds are useful for taking Given (and sometimes When) steps that are repeated in each scenario and moving them to a single place. This helps keep your scenarios clear and concise.
	You can have a single Background element per feature file, and it must appear before any of the Scenario or Scenario Outline elements. 
	Just like all the other Gherkin elements, you can give it a name, and you have space to put a multiline description before the first step. 
	Tips
		Don’t use Background to set up complicated state unless that state is something the reader actually needs to know. 
			For example, we didn’t mention the actual digits of the system-generated PIN in the previous example, because that detail wasn’t relevant to any of the scenarios.
		Keep your Background section short. After all, you’re expecting the user to actually remember this stuff when reading your scenarios. 
			If the background is more than four lines long, can you find a way to express that action in just one or two steps?
		Make your Background section vivid. Use colorful names and try to tell a story, because your readers can keep track of stories much better than they can keep track of dull names like User A, User B, Site 1, and so on. 
			If it’s worth mentioning at all, make it really stand out.
		Keep your scenarios short, and don’t have too many. If the Background is more than three or four steps long, think about using higher-level steps or splitting the feature file in two.
			You can use a background as a good indicator of when a feature is getting too long: if the new scenarios you want to add don’t fit with the existing background, consider splitting the feature.
		Avoid putting technical details such as clearing queues, starting back-end services, or opening browsers in a background. 
			Most of these things will be assumed by the reader, and there are ways to push those actions down into your support code that we’ll explain later in the book, such as in Tagged Hooks.

Data Tables
	The table starts on the line immediately following the step, and its cells are separated using the pipe character: |. 
	You can line up the pipes using whitespace to make the table look tidy, although Cucumber doesn’t mind whether you do; it will strip out the values in each cell, ignoring the surrounding whitespace.
	Example
		Given these Customers:
		| country 	| ID   		|
		| 897		| 89960B	|
		| 760		| 543678	|
		Then I can also specify headings in the first row:
		| country 	| 897		|
		| ID		| 89960B	|
		And I can specify just a list:
		|item 1|
		|item 2|
		|item 3|
		|item 4|
	StepDefinition for handling tables:
		DataTable object will be retrieved from Feature file. 
			.raw() method gets each line
			DataTable is unmodifiable, so it's content needs to be changed to an ArrayList
			ArrayList can be manipulated with .get(index) and .set(index, value) methods
		Example
			@Given("^customers are:$")
			public void customers_are(DataTable inputTable) throws Throwable {
				ArrayList modifiableList = new ArrayList<List<String>>(); 					// Create an array list that will hold List<String>
				for (List<String> currentRow : inputTable.raw()) { 							// Retrieve each row from table as List<String>
					modifiableList.add(new ArrayList<String>(currentRow)); 					// Add the current row to the ArrayList
				}

Scenario Outline
	Description
		We indicate placeholders within the scenario outline using angle brackets (<..>) where we want real values to be substituted. 
		The scenario outline itself is useless without an Examples table, which lists rows of values to be substituted for each placeholder.
		You can have any number of Scenario Outline elements in a feature and any number of Examples tables under each scenario outline. 
		Behind the scenes, Cucumber converts each row in the Examples table into a scenario before executing it.
	Multiple Examples can be used
		Scenario Outline: Withdraw fixed amount
		  Given I have <Balance> in my account
		  When I choose to withdraw the fixed amount of <Withdrawal>
		  Then I should <Outcome>
		  And the balance of my account should be <Remaining>
		  
		  Examples: Successful withdrawal
			| Balance | Withdrawal | Outcome              | Remaining |
			| $500    | $50        | receive $50 cash     | $450      |
			| $500    | $100       | receive $100 cash    | $400      |

		  Examples: Attempt to withdraw too much
			| Balance | Withdrawal | Outcome              | Remaining |
			| $100    | $200       | see an error message | $100      |
			| $0      | $50        | see an error message | $0        |
	Scenario Outlines vs Data Tables
		Remember that although the syntax for writing them in Gherkin is the same, these tables are totally different from the data tables we described earlier in this chapter.
		Data tables just describe a lump of data to attach to a single step of a single scenario
	Best Practices
		Do not use to many exmaples, might slow down the system and make it hard to read
		The ultimate goal is readability, not making sure everything is tested
		The absence of proof (no proof that system is bugfree) is not the proof of absence (system is NOT bugfree)

Structuring Features
	Best practice - Features should descripbe how the ACTUAL system works
		User stories are a great tool for planning. Each story contains a little bit of functionality that you can prioritize, build, test, and release. 
		Once a story has been released, we don’t want it to leave a trace in the code.
		We use refactoring to clean up the design so that the code absorbs the new behavior specified by the user story, leaving it looking as though that behavior had always been there.
		We want the same thing to happen with our Cucumber features.
		The features should describe how the system behaves today, but they don’t need to document the history of how it was built; that’s what a version control system is for!
	Using @Tags
		Tagging description
			Tagging Feature will tag entire feature
			Tagging scenarios will tag specific scenarios
		Tagging Use Cases
			Documentation: You want to use a tag to attach a label to certain scenarios, for example to label them with an ID from a project management tool.
			Filtering: Cucumber allows you to use tags as a filter to pick out specific scenarios to run or report on. You can even have Cucumber fail your test run if a certain tag appears too many times.
			Hooks: Run a block of code whenever a scenario with a particular tag is about to start or has just finished.
		Running Cucumber with tags
			Run cucumber with --tags @tagname argument
				Eclipse: Run Configuration -> Arguments -> Program arguments
				CLI: ./cucumber.bat --tags @Tagname

CommandLine 
	.P- 
		. step is passed
		P step is pending
		- step has been skipped
	Tell Cucumber to use camelCase when running from a command line
		java -cp "jars/*" cucumber.api.cli.Main -p pretty --snippets camelcase features
	Tell Cucumber to use shorter output
		java -cp "jars/*" cucumber.api.cli.Main -p progress --snippets camelcase features
	Run a dry run - to check whether Gherkin is valid
		java -cp "jars/*;." cucumber.api.cli.Main -g step_definitions --dry-run features

Typical Problems When Implementing Cucumber First
	Source
		The Cucumber for Java Book - Chapter 6 - "Keeping your cucumbers sweet"
	Symptom and Problem Overview
		|Symptom													| Problem						|
		|Some of our tests fail randomly 							| Flickering scenarios			|
		|We keep breaking tests unintentionally.			 		| Brittle [törékeny] features   |
		|Our features take too long to run. 						| Slow features					|
		|Our stakeholders don’t read our features. 					| Bored stakeholders			|
	Problems and Possible Root Causes
		Flickering Scenario - sometimes pass, sometimes don't
			Description
				The worst thing about a flickering scenario is that as soon as you try to reproduce it so that you can fix it, it refuses to fail. 
				Fixing a flickering scenario is one of the hardest tasks you can take on, yet it’s also one of the most important. 
				For a suite of automated tests to be useful, the team must have absolute trust in it. 
				When even just a single test is compromising that trust, it has a corrosive effect on how everyone feels about the whole test suite.
			Possible Root causes 
				Shared Environment
				Leaky Scenarios
				Race Conditions and Sleepy Steps
		Brittle features - apparently unrealated features fail after change
			Description
				When you encounter a brittle scenario, it’s usually when you’re in the middle of doing something else. 
				You’re interrupted by the unexpected failure and waste time dashing over to fix the unexpected broken test. 
				On a bad day, this can happen several times before you emerge from the rabbit warren. 
				Brittle features are self-fulfilling: when developers perceive their tests to be brittle, they tend to be less courageous about refactoring and cleaning up test code
				Instead try to get in and out as quickly as they can, leaving the tests and production codebase in an increasingly hard-to-maintain state.
			Possible Root Causes
				Fixture Data
				Duplication
				Leaky Scenarios
				Tester Apartheid
		Slow Features - running the tests will take hours 
			Description
				Adding new features to the test suite will slow it down.
				Long test time will lead people being scared to refactor. If a step definition is used in 345 scenario, refactoring it means it has to run in all 345 scenario which might take long time
				When the build is slow, developers don’t run all the tests before committing code and will rely on the continuous integration server to give them feedback instead.	
			Possible Root Causes
				Race Conditions and Sleepy Steps
				Lots of Scenarios
				Big Ball of Mud
			Possible solution
				Run Parallel tests
				Use Nightly Builds
		Bored Stakeholders
			Description
			Possible Root Causes
				Incidental Details
				Imperative Steps
				Duplication
				Ubiquitous What?
				Siloed Features
	Root causes & Possible solutions
		Incidental details - get BAs write the first draft of scenarios
			Details that are mentioned in the scenario but that actually have no relevance to the purpose of the scenario. 
			Try to avoid being guided by existing step definitions when you write your scenarios and just write down exactly what you want to happen, in plain English. 
			In fact, try to avoid programmers or testers writing scenarios on their own. 
			Instead, get nontechnical stakeholders or analysts to write the first draft of each scenario from a purely business-focused perspective or ideally in a pair with a programmer to help them share their mental model. 
		Imperative steps - use higher level of abstraction, avoid details in features
			Imperative Vs. Declarative Programming
				Imperative programming means using a sequence of commands for the computer to perform in a particular order. 
					Java is an example of an imperative language: you write a program as a series of statements that Java runs one at a time, in order. 
				A declarative program tells the computer what it should do without prescribing precisely how to do it. 
					CSS is an example of a declarative language: you tell the computer what you want the various elements on a web page to look like, and you leave it to take care of the rest.
			Imperative steps are easier to break if something changes (example "Login" replaced with "Log in"), harder to read because of the details
			Example
				Lower level of abstraction 
					Scenario: Redirect user to originally requested page after logging in
					  Given a User "dave" exists with password "secret"
						  And I am not logged in
					  When I navigate to the home page
					  Then I am redirected to the login form
					  When I fill in "Username" with "dave"
					  And I fill in "Password" with "secret"
					  And I press "Login"
					  Then I should be on the home page
				Higher level of abstraction
					Scenario: Redirect user to originally requested page after logging in
					  Given I am an unauthenticated User
					  When I attempt to view some restricted content
					  Then I am shown a login form
					  When I authenticate with valid credentials
					  Then I should be shown the restricted content
		Duplications - DRY (Don't Repeat Yourself), the test code should unfold the story of the class under test
			Description
				Duplications signs that steps are written at too low level of abstraction
			DRY - Don't Repeat Yourself
				The code should tell a story and not being a dictionary which explain all the words but doesn't make a good story
		Ubiquitous [mindenütt jelenlévő] what? - Use the same expressions within the team
			Everyone should use the same words
				Tester
					Who thinks about how to break things. 
					The tester will typically come up with lots of scenarios, sometimes covering obscure edge cases and sometimes covering very important ones that no one else had thought of.
				Programmer
					Who thinks about how to make things. 
					The programmer will typically add steps to scenarios, as he asks clarifying questions about what exactly should happen.
				Product Owner
					Who cares about scope. 
					When the tester thinks of scenarios that hit edge cases the product owner doesn’t care about, she can tell the team to drop that scenario out of scope altogether
					Or the group can decide to test it with unit tests only. 
					When the programmer explains that implementing a particular scenario will be complicated, the product owner has the authority to help decide on alternatives or to drop it altogether.
		Race Conditions & Sleepy Steps - use sleep as a workaround
			Race conditions occur when two or more parts of the system are running in parallel, but success depends on a particular one of them finishing first.
			When it’s a close race, you’ll have a flickering scenario, where the scenario will pass and fail intermittently.
			Put a system to sleep to avoid race conditions that might have cause flickering scenarios
			This should only be a workaround as it would slow down the entire test process
		Shared Environments - create a One-Click-System-Setup
			When a test system is used by both manual testers and automated tests, the manual testers actions might interrput and cause the running automated tests to fail
			To avoid flickering scenarios that result from using shared environments, the team needs a setup script that will create a new instance of the system from scratch, at the click of a button.
			If the system has a database, the database generated by the script should contain the latest schema, as well as any stored procedures, views, functions, and so on. 
			It should contain just the very minimum baseline data necessary for the system to be able to function, such as configuration data. Any more should be left for the independent scenarios to create for themselves.
			If there are message queues, or memcache daemons, the setup script should start them too, with the minimal configuration that you’d expect to be there on the running system.
		Leaky Scenarios	- create Independent scenarios, create Test Data Builders
			Cucumber scenarios are basically state-transition tests: you put the system into a Given state A, you perform action X (When), and Then you check that it has moved into expected state B. 
			So, each scenario needs the system to be in a certain state before it begins, and yet each scenario also leaves the system in a new, dirty state when it’s finished.
			When the state of the system is not reset between tests, we say that they allow state to leak between them
			When one scenario depends upon state left behind by another earlier scenario in order for it to pass, you’ve created a dependency between the two scenarios. 
			When you have a chain of several scenarios depending on each other like this, it’s only a matter of time before you end up with a train wreck.
				Example: if the first scenario is changed, then the following scenario that depends on the state of the first might break
		Fixture data  - use Test Data Builders
			Fixture data: data that's used to set up the context for a scenario or test case.  We consider fixture data to be an ANTIPATTERN. 
			We much prefer using Test Data Builders, where the relevant data is created within the test itself, rather than being buried away in a big tangled set of fixture data
			Test Data Builder 
				Specialization of the Builder Pattern to be used to create data required to have independent test scenarios
		
Exercise to rewrite a Gherkin test feature
	Given I am signed in with "admin" role
	And there is a client with name "Test Client"
	And there is a project with name "Test Project"
	And there is a a test issue with name "Test Issue"
	And there is a work unit named "Test Work Unit" with:
	| completed_on  | "2011-08-24	|
	| hours			| "7.5"			|
	And I am on the admin invoices page
	Then I should see "Test Client"
	When I follow "Test Client"
	And I fill in "invoice_id" with "abc"
	And I press "submit"
	Then I am on the admin invoices page
	And I should not see "Test client"


	Given I am signed in with "admin" role
	And there is a valid "Test Client" 
	And "Test Client" does not have invoiceID
	Then I should see "Test Client" on admin invoices page
	When I submit an invoice ID
	Then I should not see "Test Client" on admin invoices page
	And an Invoice is created

	Given I am signed in with "admin" role
	And there is a valid "Test Client" 
	And "Test Client" does have invoiceID
	Then I should not see "Test Client" on admin invoices page

Dependency Injection with PicoContainer
	Description
		Cucumber uses dependency injection to facilitate sharing state between steps. 
		Dependency injection (DI) is a technique that allows us to isolate a class from its concrete dependencies until runtime.
		Often this is used to defer the decision about which actual implementation of an interface we’re going to use.
	DI Container Integrations
		cucumber-picocontainer—PicoContainer: A lightweight DI container
		cucumber-guice—Guice: A lightweight DI container from Google
		cucumber-spring—Spring: A popular framework that includes DI and much more
		cucumber-weld—CDI/Weld: The reference implementation of the CDI (Context and Dependency Injection Framework for the Java EE platform)
		cucumber-openejb—OpenEJB: A stand-alone EJB server from Apache, including a CDI implementation
	Example
		StepDefinitions do not need to instantiate the objects that are passed to their constructor
		It is done by PicoContainer 

Hooks
	Cucumber supports hooks, which are methods that run before or after each scenario. 
	You can define them anywhere in your support or step definition layers, using the annotations @Before and @After.

Asynchronous Stuff
	Sample code:
		int timeoutMilliSecs = 3000;
		int pollIntervalMilliSecs = 100;
		while (conditionIsNotMet && timeoutMilliSecs > 0) {
			Thread.sleep(pollIntervalMilliSecs);
			timeoutMilliSecs -= pollIntervalMilliSecs;
		}
	Disadvantage of Sampling
		If the sample looks exactly like the expected outcome but was reached not the correct way, the test will result in a false positive.
		Example: Credit account with $100 then withdraw $100 and verify balance is 0. The balance migth be 0 because the transaction processor wasn't started too. 
	Use event listeners
		The best solution is to listen for events broadcast by the system.
		Pause at the appropriate points in the scenario until those events have been received.

Database testing

Notes from The Cucumber for Java Book
	ActiveJDBC 
		- examines the database schema, providing methodsto get and set data by column name
			- import activejdbc.Model;
			- class to be extended to Model
		- Convention over Configuration
			- Class name+s will be the table name: Account|accounts Widget|widgets
			- can be overridden with:
				@Table("tableName")
				class Account extends Model {...
	Liquidbase
		- Database schema managmenet through changeSets
		- There is a ChangeLog xml file, it will contain the changesets
		- Liquibase will compare the schema defined by this XML file to the actual schema of the database and perform the necessary actions to ensure that our database is up to date.  
	Creating the Database
		- create an sql script
			CREATE DATABASE bank;
			CREATE USER 'teller'@'localhost' IDENTIFIED BY 'password';   
			GRANT ALL ON bank.* TO 'teller'@'localhost' 
		- run the script (on cmd, not bash)
			mysql -h localhost -u root -p < setup-bank.sql
	Connecting to the Database
		- Opens a connection to the MySql database with the Base class:
			Base.open("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/bank", "teller", "password");
	Isolated database transactions
		- Whatever database activity happens inside a transaction cannot be seen by any other database connections.
		- Cucumber start up a web server in a separate thread which uses a separate database connection than Cucumber
	Database cleaning
		- Transaction-based cleaning is preferred because it is fast, but it works only when there is one single-threaded process.
		- Truncation-based cleaning is a slower, brute-force technique that works in multiprocess and multithreaded environments.
	MySql setup for Database chapter
		database: bank, table:accounts
		root: root/alma user: teller/password
	Issues: 
		Lifecycle configuration missing, so instrumentation phase not completed
		Error msg:
			POM Error msg:
				Plugin execution not covered by lifecycle configuration:
				org.javalite:activejdbc-instrumentation:1.4.13:instrument (execution: default, phase: process-classes)	pom.xml	/CucumberLearning	line 151	
				Maven Project Build Lifecycle Mapping Problem
			Liquibase error msg:
				Message: org.javalite.activejdbc.InitException: you are trying to work with models, but no models are found. 
				Maybe you have no models in project, or you did not instrument the models. It is expected that you have a file activejdbc_models.properties on classpath
		Possible solutions
			Solution 1: run mvn test in command line
				After mvn test you should see somehting like this
					**************************** START INSTRUMENTATION ****************************
					Directory: C:\at\CucumberLearning\target\classes
					Instrumented class: /C:/at/CucumberLearning/target/classes/src/main/java/nicebank/Account.class
					**************************** END INSTRUMENTATION ****************************
					**************************** START INSTRUMENTATION ****************************
					Directory: C:\at\CucumberLearning\target\test-classes
					**************************** END INSTRUMENTATION ****************************
			Optional steps to avoid Eclipse error warning:
				add the execution phases to ignore in POM by eclipse
					Right click on phase and select mark goal as ignored in pom
				add the execution phases to Eclipse Maven Lifecycle mapping 
					(Preferences - Maven - Lifecycle mapping)
					This will update the lifecyle-mapping.met file
	
