****************GITTING STARTED*****************
Create a new local repository & setting an upstream tracking branch
	git init
	git remote add origin URL
		[make one commit so HEAD will point to master]
	git push -u origin master

****************COMMANDS***********************
git branch
	tutorial on branch:
		https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
		https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches
	List Branches
		git branch
	See latest commits on each branch
		git branch -v
	See all branches that are merged/not merged to the CURRENT branch
		git branch --merged
		git branch --no-merged
	Create new branch
		git branch newbranchname
	Delete a branch
		git branch -d branchname
	Delete a branch even if there are unmerged files on that branch (DANGEROUS! Unmerged files will be lost)
		git branch -D branchname
	Push to a remote branch
		git push remotename/branchname
	Set a remote branch to track an already existing local branch
		git checkout localbranch
		git branch -u remotename/remotebranchname

git checkout
	description
		git checkout newbranchname - switches to newbranchname
		git checkout -b newbranchname - creates and switches to newbranchname (same as "git branch newbranchname")
		Moves the HEAD to the branch
		When you switch branches in Git, files in your working directory will change. 
		If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. 
		If Git cannot do it cleanly, it will not let you switch at all.

	
git reset
	tutorials on reset
		https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified
	reset vs checkout	
		Reset will move the branch that HEAD points to, checkout will move HEAD itself to point to another branch.
	format
		git reset [options] target
			git reset --soft target
			git reset target
			git reset --hard target
	examples:
		git reset --soft HEAD~
			Undo last commit, dont change Index and Working Directory
			When you reset back to HEAD~ (the parent of HEAD), you are moving the branch back to where it was, without changing the Index or Working Directory.
		git reset  [--mixed] HEAD~
			Undo last commit, unstage Index (everything).
			You rolled back to before you ran all your git add and git commit commands.
			The next thing reset will do is to update the Index with the contents of whatever snapshot HEAD now points to.
		git reset --hard HEAD~
			Undo last commit, Update Index and Working directory with the contents of whatever HEAD now points to
			Note: to restore WD content after a hard reset, use git reflog

git rebase
	tutorials on rebase
		https://git-scm.com/book/en/v2/Git-Branching-Rebasing
	description
		reapplies a series of commits to a new parent commit then moves the current branch pointer
		the log of a rebased branch looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.

git merge
	tips & tricks
		create a test_merge branch before merging
			http://think-like-a-git.net/sections/testing-out-merges/the-scout-pattern.html
		create a savepoint branch before merging 
			(but don't change to it, and git reset --hard savepoint if something goes wron)
			http://think-like-a-git.net/sections/testing-out-merges/the-savepoint-pattern.html

git reflog
	Show all SHA checksums of every commit
	Reflog is a mechanism to record when the tip of branches are updated. This command is to manage the information recorded in it.
	http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html

git clean
	Cleans the workspace
	-i interactive
	-n dry run
	-f force 
	
git alias (copy-paste below commands to set the alias)	
	 git config --global alias.last 'log -1 HEAD'
	 git config --global alias.logf 'log --pretty=format:\"%h - %an, %ar : %s\"'
	 source(s)
		 https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases

git diff 
	Examples:
		git diff HEAD
			Shows all diffs of current head
		git diff file
			Shows the diff of the unstaged file
		git diff --cached file 
			Shows the diff of a staged file

	Sources
		Comprehensive Guide to understand how diff works. Not easy.
		http://www.gnu.org/software/diffutils/manual/html_node/index.html#SEC_Contents

*****************Visual Tools*********************** 
	gitk
		read-only visual representation of the repository / commits / branches
	git gui
		visual tool to review changes, sign-off commits and perform many tasks	

****************KEYWORDS***********************
HEAD
	HEAD is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch. That means HEAD will be the parent of the next commit that is created. Itâ€™s generally simplest to think of HEAD as the snapshot of your last commit.
	HEAD~ - The PARENT of HEAD
	HEAD^ - 
	HEAD^^ - HEAD with 2 steps before
	HEAD^3 - HEAD with 3 steps before

	Detached HEAD
		HEAD refers to a specific commit, as opposed to referring to a named branch.
CONFLICT
	When the exact same line was modified in two different ways - git can't determine which version to keep

********************Netbeans Versioning Considerations********************
	The build (or nbbuild), dist (or nbdist), and the nbproject/private folders should not be checked into that version control system.
	Though nbproject/private should be ignored, nbproject should be checked into the version control system.
	Nbproject contains project metadata that enables others users to open the project in NetBeans without having to import the project first.

	source
		http://docs.oracle.com/cd/E50453_01/doc.80/e50452/create_japps.htm#NBDAG2974

********************SOURCES********************
	https://www.kernel.org/pub/software/scm/git/docs/user-manual.html
		Comprehensive Documentation of Git

	https://git-scm.com/book/en/v2
		Comprehensive Guide for Git

	http://ndpsoftware.com/git-cheatsheet.html	
		Excellent visual representation of Stash/Workspace/Index/Local repository/Upstream repository and how commands move content between stages

	http://marklodato.github.io/visual-git-guide/index-en.html#basic-usage
		This page gives brief, visual reference for the most common commands in git. Once you know a bit about how git works, this site may solidify your understanding

	http://onlywei.github.io/explain-git-with-d3/#commit
		Visual and animated tool to understand concepts

	Small GIT cards to memorize stuff
		http://tednaleid.github.io/understanding-git/
		
